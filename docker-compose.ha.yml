# This docker-compose file is provided as an example to create a Docker Swarm based MSActivator setup
version: "3.8"

services:
  msa-front:
    image: ubiqube/msa2-front:c7c46ad87c0ca398445aaf1a5f86d701447f2c24
    depends_on:
      - msa-api
      - msa-ui
      - camunda
      - msa-ai-ml
    healthcheck:
      test: ["CMD-SHELL", "curl -k --fail https://localhost"] 
      timeout: 2s
      retries: 10
      interval: 10s
      start_period: 30s 
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.role==manager"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
      - target: 514
        published: 514
        protocol: udp
        mode: ingress
      - target: 162
        published: 162
        protocol: udp
        mode: ingress
      - target: 69
        published: 69
        protocol: udp
        mode: ingress
      - "5200-5200:5200-5200/udp"
    #
    # uncomment one of the 2 sections below when installing a custom certificate 
    # - Docker standard standalone installation
    #volumes:
    #    - "msa_front:/etc/nginx/ssl"
    # - Docker Swarm HA installation
    #volumes:
    #    - "/mnt/NASVolume/msa_front:/etc/nginx/ssl"

  db:
    image:  ubiqube/msa2-db:5f5333a83d8054d3f0bae573901727751485b229
    command: postgres -c 'max_connections=800' -c "max_prepared_transactions=100"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 60s
      retries: 5
    environment:
      POSTGRES_PASSWORD: my_db_password
      POSTGRES_DB: POSTGRESQL
      CAMUNDA_PASSWORD: camunda
      CAMUNDA_DB: process-engine
      CAMUNDA_USER: camunda
    volumes:
      - "/mnt/NASVolume/msa_db:/var/lib/postgresql/data"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
 
  msa-api:
    image: ubiqube/msa2-api:c8a0f570da15fbcd2b29feceddd1dca9c4ea0d3d
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8480"]
    environment:
      - ES_CREDENTIALS=c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
        max_attempts: 10
    volumes:
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/msa_api_logs:/opt/wildfly/logs/processLog"
      - "/mnt/NASVolume/msa_api_keystore:/etc/pki/jentreprise"
    networks:
      default:
        aliases:
          - "msa_api"
  msa-ui:
    image: ubiqube/msa2-ui:dc3ecf58cd08546e4a06cd4ccc9b550a937d9739
    depends_on:
      - msa-api
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080"]
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.role==manager"
    environment:
    - FEATURE_ADMIN=true
    - FEATURE_CONNECTION_STATUS=true
    - FEATURE_ALARMS=true
    - FEATURE_LICENCE=true
    - FEATURE_TOPOLOGY=true
    - FEATURE_MONITORING_PROFILES=true
    - FEATURE_SCHEDULE_WORKFLOWS=true
    - FEATURE_PROFILE_AUDIT_LOGS=true
    - FEATURE_PERMISSION_PROFILES=true
    - FEATURE_AI_ML=true
    - FEATURE_WORKFLOW_OWNER=false
    networks:
      default:
        aliases:
          - "msa_ui"
  msa-sms:
    image: ubiqube/msa2-sms:245e47c0efb79d1ed3ee2b2887b2ff1971057554
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "/etc/init.d/ubi-sms status | grep -q 'service seems UP' || exit 1"] 
      
    environment:
      - ES_CREDENTIALS=c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
      - CONTAINER_DOCKNAME={{.Task.Name}}.{{.Node.Hostname}}
    volumes:
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_svn:/opt/svnroot"
      - "/mnt/NASVolume/msa_bulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    networks:
      default:
        aliases:
          - "msa_sms"

  msa-bud:
    image: ubiqube/msa2-bud:1a4fb03403ffb6a934476b9db8adb45ff2fd537b
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "/etc/init.d/ubi-bud status | grep -q 'service seems UP' || exit 1"]
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    networks:
      default:
        aliases:
          - "msa_bud"

  msa-alarm:
    depends_on:
      - db
      - msa-api
    image: ubiqube/msa2-alarm:a51f8ca0d5a5eac738bed2d5baf793e31d954637
    healthcheck:
      test: ["CMD-SHELL", "/etc/init.d/ubi-alarm status | grep -q 'service seems UP' || exit 1"]
    environment:
      - ES_CREDENTIALS=c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
      - CONTAINER_DOCKNAME={{.Task.Name}}.{{.Node.Hostname}}
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    volumes:
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
    networks:
      default:
        aliases:
          - "msa_alarm"

  msa-monitoring:
    image: ubiqube/msa2-monitoring:41fc661d9e37f31d6fa497a52d7ba33558f71826
    healthcheck:
      test: ["CMD-SHELL", "/etc/init.d/ubi-poll status | grep -q 'service seems UP' || exit 1"]
    depends_on:
      - db
      - msa-es
      - msa-dev
      - msa-api
    environment:
      - ES_CREDENTIALS=c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
    volumes:
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_bulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    networks:
      default:
        aliases:
          - "msa_monitoring"

  camunda:
    depends_on:
      - db
    image: openmsa/openmsa:msa2-camunda-2.7.0GA-507b2c9b8361821915c4bd9255bafb47ace89079
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: 'jdbc:postgresql://db:5432/process-engine'
      DB_USERNAME: camunda
      DB_PASSWORD: camunda
      DB_VALIDATE_ON_BORROW: 'true'
      WAIT_FOR: 'db:5432'
      WAIT_FOR_TIMEOUT: 60

  msa-es:
    image: openmsa/openmsa:msa2-es-2.7.0GA-6b191fca4d76383f04930565d90dbf58a051eed4
    healthcheck:
      test: ["CMD-SHELL", "test -f /home/install/init-done && curl -s -XGET -H 'Authorization: Basic c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc='  'http://localhost:9200/_cluster/health?pretty' | grep -q 'status.*green' || exit 1"]
      timeout: 2s
      retries: 10
      interval: 10s
      start_period: 30s 
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    environment:
      - discovery.type=single-node
      - script.painless.regex.enabled=true
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx1024m
      - ES_CREDENTIALS=c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
    volumes:
      - "/mnt/NASVolume/msa_es:/usr/share/elasticsearch/data"
    networks:
      default:
        aliases:
          - "msa_es"

  msa-kibana:
    image: openmsa/openmsa:msa2-kibana-2.7.0GA-e882bf60f8eeee721e7a9037efd86198ec5a5635
    depends_on:
      - msa-es
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://msa_es:9200
      - ELASTICSEARCH_HOSTS=http://msa_es:9200
      - ES_CREDENTIALS=c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    networks:
      default:
        aliases:
          - "msa_kibana"
          
  msa-ai-ml:
    image: openmsa/openmsa:msa2-ai-ml-2.7.0GA-63c7fab8c111b6cc85da049f45ebc6175a9b269a
    healthcheck:
      test: ["CMD-SHELL", "python /msa_proj/health_check.py"]
    ports:
      - "8000:8000"
    volumes:
      - "/mnt/NASVolume/msa_ai_ml_db:/msa_proj/database"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    networks:
      default:
        aliases:
          - "msa_ai_ml"

  msa-cerebro:
    image: openmsa/openmsa:msa2-cerebro-2.7.0GA-7144f86eec3b2a326066046446187f86a75515b1
    environment:
      AUTH_TYPE: basic
      BASIC_AUTH_USER: cerebro
      BASIC_AUTH_PWD: "N@X{M4tfw'5%)+35"
    entrypoint:
      - /opt/cerebro/bin/cerebro
      - -Dhosts.0.host=http://msa_es:9200
    depends_on:
      - msa_es
    ports:
      - "9000:9000"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    networks:
      default:
        aliases:
          - "msa_cerebro"

  msa-dev:
    image: ubiqube/msa2-linuxdev:10265a80432068ec455e8774f861d31da85e92a1
    depends_on:
      - msa-es
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
    volumes:
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_svn:/opt/svnroot"
    networks:
      default:
        aliases:
          - "msa_dev"
        

networks:
  default:
    driver_opts:
      encrypted: "true"
