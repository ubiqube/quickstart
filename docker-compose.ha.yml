# This docker-compose file is provided as an example to create a Docker Swarm based MSActivator setup
version: "3.8"

x-es-configuration: &es-configuration
    ES_CREDENTIALS: c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
    ES_SERVERS: "msa-es"

x-logging: &logging
  driver: "json-file"
  options:
    mode: non-blocking
    max-buffer-size: "4m"
    max-size: "10m"
    max-file: "5"

x-kafka-syslogs: &kafka-syslogs
    KAFKA_SERVER: "kafka:9094"
    KAFKA_TOPIC: "syslogs"

x-placement_app: &placement_app
  replicas: 1
  placement:	
    max_replicas_per_node: 1
    constraints:	
      - "node.labels.worker==app"

x-placement_db: &placement_db
  replicas: 1
  placement:	
    max_replicas_per_node: 1
    constraints:	
      - "node.labels.worker==db"

x-healthcheck: &healthcheck
  timeout: 10s
  retries: 10
  interval: 30s
  start_period: 120s

services:
  msa-front:
    image: ubiqube/msa2-front:ff900ca038df1538cfcd5f9604c3e44ea1e867e5
    depends_on:
      - msa-api
      - msa-ui
      - camunda
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl -k --fail https://localhost"]
    deploy:
      <<: *placement_app
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
    logging:
      driver: "json-file"
      options:
        mode: non-blocking
        max-buffer-size: "4m"
        max-size: "10m"
        max-file: "5"
    volumes:
        - "/mnt/NASVolume/msa_front_conf:/etc/nginx/custom_conf.d"
    #
    # uncomment one of the 2 sections below when installing a custom certificate
    # - Docker standard standalone installation
    #volumes:
    #    - "msa_front:/etc/nginx/ssl"
    # - Docker Swarm HA installation
    #volumes:
    #    - "/mnt/NASVolume/msa_front:/etc/nginx/ssl"

  db:
    image: ubiqube/msa2-db:081eb0656d990cd231ba1c15c1d14501b7426eea
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/usr/pgsql-12/bin/pg_isready -h localhost"]
    deploy:
      <<: *placement_db
    environment:
      CAMUNDA_PASSWORD: camunda
      CAMUNDA_DB: process-engine
      CAMUNDA_USER: camunda
      KEY_VAULT_USER: key_vault
      KEY_VAULT_DB: key_vault
      PG_MODE: primary
      PG_PRIMARY_USER: postgres
      PG_PRIMARY_PASSWORD: my_db_password
      PG_USER: postgres
      PG_PASSWORD: my_db_password
      PG_DATABASE: POSTGRESQL
      PG_ROOT_PASSWORD: my_db_password
      PG_PRIMARY_PORT: 5432
      MAX_CONNECTIONS: 1600
    volumes:
      - "/mnt/NASVolume/msa_db:/pgsqldata/pgsql"
    logging:
      <<: *logging

  db-replica:
    image: ubiqube/msa2-db:081eb0656d990cd231ba1c15c1d14501b7426eea
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/usr/pgsql-12/bin/pg_isready -h localhost"]
    deploy:
      <<: *placement_db
    environment:
      CAMUNDA_PASSWORD: camunda
      CAMUNDA_DB: process-engine
      CAMUNDA_USER: camunda
      KEY_VAULT_USER: key_vault
      KEY_VAULT_DB: key_vault
      PG_MODE: replica
      PG_PRIMARY_USER: postgres
      PG_PRIMARY_PASSWORD: my_db_password
      PG_USER: postgres
      PG_PASSWORD: my_db_password
      PG_DATABASE: POSTGRESQL
      PG_ROOT_PASSWORD: my_db_password
      PG_PRIMARY_PORT: 5432
      PG_PRIMARY_HOST: db
    logging:
      <<: *logging

  msa-api:
    image: ubiqube/msa2-api:c20c37df028ca7ac866d4603c1824336436d83b8
    depends_on:
      - db
    healthcheck:
      <<: *healthcheck   
      test: ["CMD-SHELL", "curl --fail http://localhost:8480"]
    deploy:
      <<: *placement_app
    environment:
      <<: *es-configuration
      HOST_HOSTNAME: "{{.Node.Hostname}}"
    volumes:
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/msa_api_keystore:/etc/pki/jentreprise"
      - "/mnt/NASVolume/msa_api_logs:/opt/wildfly/logs/processLog"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_api"

  msa-ui:
    image: ubiqube/msa2-ui:10e4a2088eedcce4309a752f4c658da43daf53a5
    depends_on:
      - msa-api
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "curl --fail http://localhost:8080"]
    deploy:
      <<: *placement_app
    environment:
    - FEATURE_ADMIN=true
    - FEATURE_REPOSITORY=true
    - FEATURE_CONNECTION_STATUS=true
    - FEATURE_ALARMS=true
    - FEATURE_LICENCE=true
    - FEATURE_TOPOLOGY=true
    - FEATURE_MONITORING_PROFILES=true
    - FEATURE_PROFILE_AUDIT_LOGS=true
    - FEATURE_PERMISSION_PROFILES=true
    - FEATURE_AI_ML=false
    - FEATURE_MICROSERVICE_BULK_OPERATION=false
    - FEATURE_EDIT_VARIABLES_IN_MICROSERVICE_CONSOLE=true
    - FEATURE_WORKFLOW_OWNER=false
    - FEATURE_PERMISSION_PROFILE_LABELS=false
    - FEATURE_BPM=true
    - FEATURE_IMPORT_WITH_SAME_AND_UPPERRANK=true
    - FEATURE_REPOFOLDERLIST=[\"Datafiles\"]
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_ui"

  msa-rsyslog:
    depends_on:
      - msa-event
    image: ubiqube/msa2-rsyslog:ce35fbb9c7441f1c4041af6e431a0cfae2809785
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "ps -p 1 -h -o%cpu | awk '{if ($$1 > 99) exit 1; else exit 0;}'"]
    deploy:
      <<: *placement_app
    environment:
      <<: *kafka-syslogs  
    # environment:
      # enable omfwd acxtion type for syslog Forwarding Output Module
      # https://www.rsyslog.com/doc/v8-stable/configuration/modules/omfwd.html
      # default
      # ACTIONTYPE: "omfwd"
      # configure a specific port for TLS. Default is 6514
      # TLS_SYSLOG_PORT: 6514
      ACTIONTYPE: "omkafka"
    ports:
      - target: 514
        published: 514
        protocol: udp
        mode: ingress
      - target: 514
        published: 514
        protocol: tcp
        mode: ingress
      - target: 6514
        published: 6514
        protocol: tcp
        mode: ingress
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_rsyslog"

  msa-sms:
    image: ubiqube/msa2-sms:a0f7339b454f140b52fb20d0239ede154c78270a
    depends_on:
      - db
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/etc/init.d/ubi-sms status | grep -q 'service seems UP' || exit 1"]
    deploy:
      <<: *placement_app
    environment:
      <<: *es-configuration
      CONTAINER_DOCKNAME: "{{.Task.Name}}.{{.Node.Hostname}}"
      HOST_HOSTNAME: "{{.Node.Hostname}}"
    volumes:
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/msa_svn:/opt/svnroot"
      - "/mnt/NASVolume/msa_bulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_bulkfiles_err:/opt/sms/spool/parser-error"
    ports:
      - target: 69
        published: 69
        protocol: udp
        mode: host
      - target: 5200
        published: 5200
        protocol: udp
        mode: host
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_sms"

  msa-parse:
    image: ubiqube/msa2-parse:6ca6448762d68b5fd2276adb2489e357b9996493
    depends_on:
      - db
      - msa-dev
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/etc/init.d/ubi-sms status | grep -q 'service seems UP' || exit 1"]
    deploy:
      <<: *placement_app
    environment:
      <<: [*es-configuration, *kafka-syslogs]
    logging:
      <<: *logging
    volumes:
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_parsebulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_parsebulkfiles_err:/opt/sms/spool/parser-error"
    networks:
      default:
        aliases:
          - "msa_parse"

  msa-snmptrap:
    image: ubiqube/msa2-snmptrap:dee5c28ec7481c77cac4bbdf54ad94d36217072c
    depends_on:
      - db
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/etc/init.d/ubi-sms status | grep -q 'service seems UP' || exit 1"]
    deploy:
      <<: *placement_app
    environment:
      <<: *es-configuration
    ports:
      - target: 162
        published: 162
        protocol: udp
        mode: host
    logging:
      <<: *logging
    volumes:
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_snmptrapbulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_snmptrapbulkfiles_err:/opt/sms/spool/parser-error"
    networks:
      default:
        aliases:
          - "msa_snmptrap"

  msa-bud:
    image: ubiqube/msa2-bud:0f1726a8f27d4f789e06fcbf5e3129486734f645
    depends_on:
      - db
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/etc/init.d/ubi-bud status | grep -q 'service seems UP' || exit 1"]
    environment:
      - CONTAINER_DOCKNAME={{.Task.Name}}.{{.Node.Hostname}}
    deploy:
      <<: *placement_app
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_bud"

  msa-alarm:
    depends_on:
      - db
      - msa-api
      - msa-dev
    image: ubiqube/msa2-alarm:12dee3d8e5cd243409edf5a2b438e84e09483ef5
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/etc/init.d/ubi-alarm status | grep -q 'service seems UP' || exit 1"]
    deploy:
      <<: *placement_app
    environment:
      <<: *es-configuration
      CONTAINER_DOCKNAME: "{{.Task.Name}}.{{.Node.Hostname}}"
    volumes:
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
      - "/mnt/NASVolume/msa_alarmbulkfiles:/opt/sms/spool/alarms"
      - "/mnt/NASVolume/msa_alarmbulkfiles_err:/opt/sms/spool/alarms-error"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_alarm"

  msa-monitoring:
    depends_on:
      - db
      - msa-dev
      - msa-api
    image: ubiqube/msa2-monitoring:a3e826a1025e3b7130705188f59bcb5de5c9a762
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "/etc/init.d/ubi-poll status | grep -q 'service seems UP' || exit 1"]
    deploy:
      <<: *placement_app
    environment:
      <<: *es-configuration
      CONTAINER_DOCKNAME: "{{.Task.Name}}.{{.Node.Hostname}}"
    volumes:
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_monitbulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_monitbulkfiles_err:/opt/sms/spool/parser-error"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_monitoring"

  kafka:
    image: bitnami/kafka:3.5
    healthcheck:
      <<: *healthcheck
    deploy:
      <<: *placement_app
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_LOG_CLEANER_ENABLE=true
      - KAFKA_CFG_LOG_CLEANUP_POLICY=delete
      - KAFKA_CFG_LOG_RETENTION_BYTES=2000000000
      - KAFKA_CFG_LOG_RETENTION_MS=86400000
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    logging:
      <<: *logging
    volumes:
      - "/mnt/NASVolume/kafka_data:/bitnami/kafka"

  msa-broker:
    depends_on:
      - db
    image: ubiqube/msa2-broker:4725a0b2c9a64ab0df2295ce5d76e928bed0255e
    healthcheck:
      <<: *healthcheck
    deploy:
      <<: *placement_app
    environment:
      ARTEMIS_PASSWORD: simetraehcapa
      ARTEMIS_USER: artemis
    logging:
      <<: *logging
    volumes:
      - "/mnt/NASVolume/mano_artemis:/var/lib/artemis-instance"

  camunda:
    depends_on:
      - db
    image: ubiqube/msa2-camunda:d95c1ded1750a35df6593fb5a8bcd376b4a76dd0
    healthcheck:
      <<: *healthcheck
    deploy:
      <<: *placement_app
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: 'jdbc:postgresql://db:5432/process-engine'
      DB_USERNAME: camunda
      DB_PASSWORD: camunda
      DB_VALIDATE_ON_BORROW: 'true'
      WAIT_FOR: 'db:5432'
      WAIT_FOR_TIMEOUT: 60
    logging:
      <<: *logging

  msa-kibana:
    image: ubiqube/msa2-kibana:54e81a717d1f9aa7acc372643c6966e23b8b66fe
    healthcheck:
      <<: *healthcheck
    deploy:
      <<: *placement_app
    environment:
      ELASTICSEARCH_URL: "http://msa_es:9200"
      ELASTICSEARCH_HOSTS: "http://msa_es:9200"
      <<: *es-configuration
    ports:
      - "5601:5601"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_kibana"

  msa-es:
    image: ubiqube/msa2-es:ba6a2c71fcc016b507d6472c688b56ad1e14774e
    healthcheck:
      <<: *healthcheck
      test: ["CMD-SHELL", "test -f /home/install/init-done && curl -s -XGET -H 'Authorization: Basic c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc='  'http://localhost:9200/_cluster/health?pretty' | grep -q 'status.*green' || exit 1"]
    deploy:
      <<: *placement_app
    environment:
      discovery.type: "single-node"
      script.painless.regex.enabled: "true"
      bootstrap.memory_lock: "true"
      xpack.security.enabled: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx1024m"
      <<: *es-configuration
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      default:
        aliases:
          - "msa_es"
    volumes:
     - "/mnt/NASVolume/msa_es:/usr/share/elasticsearch/data"
    logging:
      <<: *logging

  msa-cerebro:
    image: ubiqube/msa2-cerebro:8374160f95e2349711204189a3bf8a385f7252b5
    healthcheck:
      <<: *healthcheck
    deploy:
      <<: *placement_app
    environment:
      AUTH_TYPE: basic
      BASIC_AUTH_USER: cerebro
      BASIC_AUTH_PWD: "N@X{M4tfw'5%)+35"
    entrypoint:
      - /opt/cerebro/bin/cerebro
      - -Dhosts.0.host=http://msa_es:9200
    ports:
      - "9000:9000"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_cerebro"

  msa-dev:
    image: ubiqube/msa2-linuxdev:e2f18f31a68294c53ab379a47b821375c4ae6c78
    healthcheck:
      <<: *healthcheck
    deploy:
      <<: *placement_app
    volumes:
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_svn:/opt/svnroot"
      - "/mnt/NASVolume/msa_api:/opt/ubi-jentreprise/generated/conf"
      - "/mnt/NASVolume/msa_svn_ws:/opt/sms/spool/routerconfigs"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_dev"

volumes:
  msa_sms_logs:
  msa_monitbulkfiles:
  msa_monitbulkfiles_err:
  msa_parsebulkfiles:
  msa_parsebulkfiles_err:
  msa_alarmbulkfiles:
  msa_alarmbulkfiles_err:
  msa_bulkfiles:
  msa_bulkfiles_err:
  msa_snmptrapbulkfiles:
  msa_snmptrapbulkfiles_err:
  msa_es:
  msa_es_config:
  msa_api_logs: 

networks:
  default:
    #driver_opts:
      #encrypted: "true"
