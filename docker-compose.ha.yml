# This docker-compose file is provided as an example to create a Docker Swarm based MSActivator setup
version: "3.8"

x-es-configuration: &es-configuration
    ES_CREDENTIALS: c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc=
    ES_SERVERS: "msa-es"

x-logging: &logging
  driver: "json-file"
  options:
    mode: non-blocking
    max-buffer-size: "4m"
    max-size: "10m"
    max-file: "5"

services:
  msa-front:
    image: openmsa/openmsa:msa2-front-2.8.9.4-a1e9e5046a45a58094cfbef67775d78f408eb2f8
    depends_on:
      - msa-api
      - msa-ui
      - camunda
    healthcheck:
      test: ["CMD-SHELL", "curl -k --fail https://localhost"]
      timeout: 2s
      retries: 10
      interval: 10s
      start_period: 30s
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
      - target: 162
        published: 162
        protocol: udp
        mode: ingress
      - target: 69
        published: 69
        protocol: udp
        mode: ingress
      - "5200-5200:5200-5200/udp"
    logging:
      driver: "json-file"
      options:
        mode: non-blocking
        max-buffer-size: "4m"
        max-size: "10m"
        max-file: "5"
    volumes:
        - "/mnt/NASVolume/msa_front_conf:/etc/nginx/custom_conf.d"
    #
    # uncomment one of the 2 sections below when installing a custom certificate
    # - Docker standard standalone installation
    #volumes:
    #    - "msa_front:/etc/nginx/ssl"
    # - Docker Swarm HA installation
    #volumes:
    #    - "/mnt/NASVolume/msa_front:/etc/nginx/ssl"

  db:
    image: openmsa/openmsa:msa2-db-2.8.9.3-4104827320a55e4254270ed9ab7d66ad3f961755
    healthcheck:
      test: ["CMD-SHELL", "/usr/pgsql-12/bin/pg_isready -h localhost"]
      timeout: 20s
      interval: 30s
      retries: 5
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==db"
    environment:
      CAMUNDA_PASSWORD: camunda
      CAMUNDA_DB: process-engine
      CAMUNDA_USER: camunda
      KEY_VAULT_USER: key_vault
      KEY_VAULT_DB: key_vault
      PG_MODE: primary
      PG_PRIMARY_USER: postgres
      PG_PRIMARY_PASSWORD: my_db_password
      PG_USER: postgres
      PG_PASSWORD: my_db_password
      PG_DATABASE: POSTGRESQL
      PG_ROOT_PASSWORD: my_db_password
      PG_PRIMARY_PORT: 5432
      MAX_CONNECTIONS: 1600
    volumes:
      - "/mnt/NASVolume/msa_db:/pgsqldata/pgsql"
    logging:
      <<: *logging

  db-replica:
    image: openmsa/openmsa:msa2-db-2.8.9.3-4104827320a55e4254270ed9ab7d66ad3f961755
    healthcheck:
      test: ["CMD-SHELL", "/usr/pgsql-12/bin/pg_isready -h localhost"]
      timeout: 20s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.db==replica"
    environment:
      CAMUNDA_PASSWORD: camunda
      CAMUNDA_DB: process-engine
      CAMUNDA_USER: camunda
      KEY_VAULT_USER: key_vault
      KEY_VAULT_DB: key_vault
      PG_MODE: replica
      PG_PRIMARY_USER: postgres
      PG_PRIMARY_PASSWORD: my_db_password
      PG_USER: postgres
      PG_PASSWORD: my_db_password
      PG_DATABASE: POSTGRESQL
      PG_ROOT_PASSWORD: my_db_password
      PG_PRIMARY_PORT: 5432
      PG_PRIMARY_HOST: db
    logging:
      <<: *logging

  msa-api:
    image: openmsa/openmsa:msa2-api-2.8.9.4-cd7002d57c22e4b3517e59fdaebbe412b4940d77
    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8480"]
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
        max_attempts: 10
    environment:
      <<: *es-configuration
    volumes:
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/msa_api_logs:/opt/wildfly/logs/processLog"
      - "/mnt/NASVolume/msa_api_keystore:/etc/pki/jentreprise"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_api"

  msa-ui:
    image: openmsa/openmsa:msa2-ui-2.8.9.3-63f26005df1c2610e98bd6a1aab1296cdedae078
    depends_on:
      - msa-api
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080"]
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    environment:
    - FEATURE_ADMIN=true
    - FEATURE_REPOSITORY=true
    - FEATURE_CONNECTION_STATUS=true
    - FEATURE_ALARMS=true
    - FEATURE_LICENCE=true
    - FEATURE_TOPOLOGY=true
    - FEATURE_MONITORING_PROFILES=true
    - FEATURE_PROFILE_AUDIT_LOGS=true
    - FEATURE_PERMISSION_PROFILES=true
    - FEATURE_AI_ML=false
    - FEATURE_MICROSERVICE_BULK_OPERATION=false
    - FEATURE_EDIT_VARIABLES_IN_MICROSERVICE_CONSOLE=true
    - FEATURE_WORKFLOW_OWNER=false
    - FEATURE_PERMISSION_PROFILE_LABELS=false
    - FEATURE_BPM=true
    - FEATURE_IMPORT_WITH_SAME_AND_UPPERRANK=true
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_ui"

  msa-rsyslog:
    depends_on:
      - msa-sms
    image: openmsa/openmsa:msa2-rsyslog-2.8.9.1-c7981110f0ff1ee153199786f4abf3c8f5e49db7
    # environment:
      # enable omfwd acxtion type for syslog Forwarding Output Module
      # https://www.rsyslog.com/doc/v8-stable/configuration/modules/omfwd.html
      # default
      # ACTIONTYPE: "omfwd"
      # configure a specific port for TLS. Default is 6514
      # TLS_SYSLOG_PORT: 6514
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    ports:
      - target: 514
        published: 514
        protocol: udp
        mode: ingress
      - target: 514
        published: 514
        protocol: tcp
        mode: ingress
      - target: 6514
        published: 6514
        protocol: tcp
        mode: ingress
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_rsyslog"

  msa-sms:
    image: openmsa/openmsa:msa2-sms-2.8.9.1-24b55548dda0ca945265ec2f2589a88154618a72
    depends_on:
      - db
    healthcheck:
      timeout: 5s
      retries: 10
      interval: 10s
      start_period: 30s
      test: ["CMD-SHELL", "/etc/init.d/ubi-sms status | grep -q 'service seems UP' || exit 1"]
    environment:
      <<: *es-configuration
      CONTAINER_DOCKNAME: "{{.Task.Name}}.{{.Node.Hostname}}"
    volumes:
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_svn:/opt/svnroot"
      - "/mnt/NASVolume/msa_bulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_bulkfiles_err:/opt/sms/spool/parser-error"
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_sms"

  msa-bud:
    image: openmsa/openmsa:msa2-bud-2.8.9.1-26337e8d7cb89f769fb2c391a66d3d8da3fb357c
    depends_on:
      - db
    healthcheck:
      timeout: 5s
      retries: 10
      interval: 10s
      start_period: 30s
      test: ["CMD-SHELL", "/etc/init.d/ubi-bud status | grep -q 'service seems UP' || exit 1"]
    environment:
      - CONTAINER_DOCKNAME={{.Task.Name}}.{{.Node.Hostname}}
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_bud"

  msa-alarm:
    depends_on:
      - db
      - msa-api
    image: openmsa/openmsa:msa2-alarm-2.8.9.1-a284d8fcc1063573c2cb1a910fca47f9f9ead416
    healthcheck:
      timeout: 5s
      retries: 10
      interval: 10s
      start_period: 30s
      test: ["CMD-SHELL", "/etc/init.d/ubi-alarm status | grep -q 'service seems UP' || exit 1"]
    environment:
      <<: *es-configuration
      CONTAINER_DOCKNAME: "{{.Task.Name}}.{{.Node.Hostname}}"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    volumes:
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
      - "/mnt/NASVolume/msa_alarmbulkfiles:/opt/sms/spool/alarms"
      - "/mnt/NASVolume/msa_alarmbulkfiles_err:/opt/sms/spool/alarms-error"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_alarm"

  msa-monitoring:
    image: openmsa/openmsa:msa2-monitoring-2.8.9.3-71bc069d5728ed9ef74fc1a69db4315139bd8348
    healthcheck:
      timeout: 5s
      retries: 10
      interval: 10s
      start_period: 30s
      test: ["CMD-SHELL", "/etc/init.d/ubi-poll status | grep -q 'service seems UP' || exit 1"]
    depends_on:
      - db
      - msa-dev
      - msa-api
    environment:
      <<: *es-configuration
      CONTAINER_DOCKNAME: "{{.Task.Name}}.{{.Node.Hostname}}"
    volumes:
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/rrd_repository:/opt/rrd"
      - "/mnt/NASVolume/msa_sms_logs:/opt/sms/logs"
      - "/mnt/NASVolume/msa_bulkfiles:/opt/sms/spool/parser"
      - "/mnt/NASVolume/msa_bulkfiles_err:/opt/sms/spool/parser-error"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_monitoring"

  camunda:
    depends_on:
      - db
    image: openmsa/openmsa:msa2-camunda-2.8.9.1-8dda18db891417d6899177400920e27f3d6db445
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: 'jdbc:postgresql://db:5432/process-engine'
      DB_USERNAME: camunda
      DB_PASSWORD: camunda
      DB_VALIDATE_ON_BORROW: 'true'
      WAIT_FOR: 'db:5432'
      WAIT_FOR_TIMEOUT: 60
    logging:
      <<: *logging

  msa-kibana:
    image: openmsa/openmsa:msa2-kibana-2.8.9.1-46a9280639d973021a841c3792aed3948846d73a
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: "http://msa_es:9200"
      ELASTICSEARCH_HOSTS: "http://msa_es:9200"
      <<: *es-configuration
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_kibana"

  msa-es:
    healthcheck:
      test: ["CMD-SHELL", "test -f /home/install/init-done && curl -s -XGET -H 'Authorization: Basic c3VwZXJ1c2VyOnheWnl1R002fnU9K2ZZMkc='  'http://localhost:9200/_cluster/health?pretty' | grep -q 'status.*green' || exit 1"]
      interval: 60s
      start_period: 60s
    image: openmsa/openmsa:msa2-es-2.8.9.1-95d632f4eb657b3d2b367a4bbf56c5a77959e6ac
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    environment:
      discovery.type: "single-node"
      script.painless.regex.enabled: "true"
      bootstrap.memory_lock: "true"
      xpack.security.enabled: "true"
      ES_JAVA_OPTS: "-Xms512m -Xmx1024m"
      <<: *es-configuration
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      default:
        aliases:
          - "msa_es"
    volumes:
     - "/mnt/NASVolume/msa_es:/usr/share/elasticsearch/data"
    logging:
      <<: *logging

  msa-cerebro:
    image: openmsa/openmsa:msa2-cerebro-2.8.9.1-20ee9b68766b7432a7faf20244d604393f6fdce4
    environment:
      AUTH_TYPE: basic
      BASIC_AUTH_USER: cerebro
      BASIC_AUTH_PWD: "N@X{M4tfw'5%)+35"
    entrypoint:
      - /opt/cerebro/bin/cerebro
      - -Dhosts.0.host=http://msa_es:9200
    ports:
      - "9000:9000"
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_cerebro"

  msa-dev:
    image: openmsa/openmsa:msa2-linuxdev-2.8.9.1-f386e5b7b577cbb28cb20a075e911c72137dab8b
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
        constraints:
          - "node.labels.worker==app"
    volumes:
      - "/mnt/NASVolume/msa_entities:/opt/fmc_entities"
      - "/mnt/NASVolume/msa_repository:/opt/fmc_repository"
      - "/mnt/NASVolume/msa_dev:/opt/devops/"
      - "/mnt/NASVolume/msa_svn:/opt/svnroot"
    logging:
      <<: *logging
    networks:
      default:
        aliases:
          - "msa_dev"

volumes:
  msa_bulkfiles:
  msa_monitbulkfiles:

networks:
  default:
    #driver_opts:
      #encrypted: "true"
